---
{{- include "bjw-s.common.loader.init" . }}

{{- define "app-template.hardcodedValues" -}}
# Set the nameOverride based on the release name if no override has been set
{{ if not .Values.global.nameOverride }}
global:
  nameOverride: "{{ .Release.Name }}"
{{ end }}

controllers:
  {{ if .Values.gpustack.enabled }}
  gpustack:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    pod:
      {{- with .Values.gpustack.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}

    containers:
      gpustack:
        image:
          repository: gpustack/gpustack
          tag: 'latest-cpu'
          pullPolicy: Always

        # args:
        #   - --config=/config/config.json

        env:
          - name: LLAMACPP_GRPC_SERVERS
            value: 'localhost:50052'

        ports:
          - name: http
            containerPort: 80
  {{- end }}

  {{ range $modelIndex, $model := $.Values.llama.models }}
  llama-server-{{ $modelIndex }}:
    strategy: RollingUpdate

    containers:
      server:
        image:
          repository: {{ $model.container.image.repository | default "ghcr.io/ggml-org/llama.cpp" }}
          tag: {{ $model.container.image.tag | default "server" }}
          pullPolicy: Always

        command:
          - /app/llama-server

        args:
          - --model
          - {{ $model.path }}
          - --host
          - 0.0.0.0
          - --port
          - '8001'
          - --threads
          - '{{ $model.threads }}'
          - --ctx-size
          - '{{ $model.contextSize }}'
          - --batch-size
          - '{{ $model.batchSize }}'

        env:
          - name: APP_MODE
            value: 'backend'

          - name: APP_MEM
            value: '8192'

        ports:
          - name: http
            containerPort: 8001

        # -- Probe configuration
        # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
        probes:
          # -- Liveness probe configuration
          # @default -- See below
          liveness:
            # -- Enable the liveness probe
            enabled: true
            # -- Set this to `true` if you wish to specify your own livenessProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: HTTP

            port: http

            path: /health

            # -- The spec field contains the values for the default livenessProbe.
            # If you selected `custom: true`, this field holds the definition of the livenessProbe.
            # @default -- See below
            spec:
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 1
              failureThreshold: 3

          # -- Startup probe configuration
          # @default -- See below
          startup:
            # -- Enable the liveness probe
            enabled: true

            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: HTTP

            port: http

            path: /health

            # -- The spec field contains the values for the default livenessProbe.
            # If you selected `custom: true`, this field holds the definition of the livenessProbe.
            # @default -- See below
            spec:
              initialDelaySeconds: 60
              periodSeconds: 30
              timeoutSeconds: 1
              failureThreshold: 30
  {{- end }}

  {{- if .Values.localai.enabled }}
  localai:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      # server:
      #   image:
      #     repository: kristianfoss/llama
      #     tag: 'test'
      #     pullPolicy: Always

      #   # command:
      #   #   - /app/rpc-server
        
      #   # args:
      #   #   - --host
      #   #   - 127.0.0.1
      #   #   - --port
      #   #   - '50052'
      #   #   - --mem
      #   #   - '8192'
      #   #   - --threads
      #   #   - '12'

      #   ports:
      #     - name: http
      #       containerPort: 8001

      localai:
        image:
          repository: localai/localai
          tag: 'latest'
          pullPolicy: Always

        # args:
        #   - --config=/config/config.json

        env:
          - name: LLAMACPP_GRPC_SERVERS
            value: 'localhost:50052'

          - name: LOCALAI_BACKEND_GALLERIES
            value: |-
              [
                {
                  "name":"CoRE",
                  "url":"https://raw.githubusercontent.com/K-FOSS/CoRE-Business/main/LocalAI/backends/llm-backend.yaml"
                }
              ]

        ports:
          - name: http
            containerPort: 8080
  {{- end }}

  docker:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      kubedock:
        image:
          repository: joyrex2001/kubedock
          tag: 'latest'
          pullPolicy: IfNotPresent

        # args:
        #   - --config=/config/config.json

        # env:
        #   - name: DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS
        #     value: '-p 0.0.0.0:2376:2376/tcp'

        ports:
          - name: http
            containerPort: 2475


  {{- if .Values.owui.enabled }}
  openwebui:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    name: openwebui

    containers:
      openwebui:
        image:
          repository: ghcr.io/open-webui/open-webui
          #
          # TODO: Get Renovate or similar managing this
          #
          tag: main
          pullPolicy: Always

        securityContext:
          seLinuxOptions: {}
          privileged: false
          allowPrivilegeEscalation: false
          seccompProfile:
            type: "RuntimeDefault"

        env:
          - name: WEBUI_NAME
            value: 'CoRE-AI'

          - name: ENABLE_CODE_EXECUTION
            value: 'False'

          - name: ENABLE_CODE_INTERPRETER
            value: 'False'

          #
          # OIDC
          #
          - name: OAUTH_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-oidc'
                key: OIDC_CLIENT_ID

          - name: OAUTH_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-oidc'
                key: OIDC_CLIENT_SECRET

          - name: OPENID_PROVIDER_URL
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-oidc'
                key: OIDC_ISSUER_URL

          - name: OAUTH_SCOPES
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-oidc'
                key: OIDC_SCOPES

          #
          # LDAP
          #
          - name: ENABLE_LDAP
            value: 'True'

          - name: LDAP_SERVER_HOST
            value: 'ldap.mylogin.space'

          - name: LDAP_SERVER_PORT
            value: '636'

          - name: LDAP_ATTRIBUTE_FOR_USERNAME
            value: 'cn'

          - name: ENABLE_LDAP_GROUP_MANAGEMENT
            value: 'True'

          - name: ENABLE_LDAP_GROUP_CREATION
            value: 'True'

          - name: LDAP_SEARCH_BASE
            value: 'ou=users,dc=ldap,dc=mylogin,dc=space'

          - name: LDAP_APP_DN
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-openwebui-user'
                key: ldapsBIND

          - name: LDAP_APP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-openwebui-user'
                key: password

          - name: REDIS_URL
            value: 'redis://redis.mylogin.space/150'

          - name: WEBSOCKET_REDIS_URL
            value: 'redis://redis.mylogin.space/151'


        ports:
          - name: http
            containerPort: 8080
  {{- end }}



persistence:
  {{- if .Values.gpustack.enabled }}
  gpustack:
    enabled: true
    type: persistentVolumeClaim

    size: 50Gi

    suffix: gpu-stack

    accessMode: ReadWriteOnce

    storageClass: ssd-storage

    advancedMounts:
      gpustack:
        gpustack:
          - path: /var/lib/gpustack
  {{- end }}

  {{- if .Values.localai.enabled }}
  models:
    enabled: true
    type: persistentVolumeClaim

    size: 50Gi

    accessMode: ReadWriteOnce

    #storageClass: ssd-storage

    advancedMounts:
      {{ range $modelIndex, $model := $.Values.llama.models }}
      llama-server-{{ $modelIndex }}:
        server:
          - path: /models
      {{- end }}

      localai:
        {{- if .Values.localai.llama }}
        server:
          - path: /models
        {{- end }}



        localai: # the container with the "main" identifier
          - path: /models
        
  backends:
    enabled: true
    type: persistentVolumeClaim

    size: 50Gi

    accessMode: ReadWriteOnce

    #storageClass: 

    advancedMounts:
      localai:
        localai: # the container with the "main" identifier
          - path: /backends
  {{- end }}

service:
  {{ range $modelIndex, $model := $.Values.llama.models }}
  llama-server-{{ $modelIndex }}:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: llama-server-{{ $modelIndex }}

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: false

    # -- Set the service type
    type: ClusterIP

    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    #externalTrafficPolicy: Local

    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
    # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: []

    # -- Provide additional annotations which may be required.
    #annotations:

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 80

        targetPort: 8001

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol:
  {{- end }}

  {{- if .Values.localai.enabled}}
  localai:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: localai

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: false

    # -- Set the service type
    type: ClusterIP

    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    #externalTrafficPolicy: Local

    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
    # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: []

    # -- Provide additional annotations which may be required.
    #annotations:

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 80

        targetPort: 8080

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol:
  {{- end }}

  {{- if .Values.mcp.enabled }}
  openwebuimcp:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: openwebuimcp

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: true

    # -- Set the service type
    type: ClusterIP

    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    #externalTrafficPolicy: Local

    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
    # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: []

    # -- Provide additional annotations which may be required.
    #annotations:

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 80

        targetPort: 8000

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol:
  {{- end }}

  {{- if .Values.owui.enabled }}
  openwebui:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: openwebui

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: false

    # -- Set the service type
    type: ClusterIP

    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    #externalTrafficPolicy: Local

    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
    # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: []

    # -- Provide additional annotations which may be required.
    #annotations:

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: false

        # -- The port number
        port: 80

        targetPort: 8080

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol:
  {{- end }}



route:
  {{- if .Values.owui.enabled }}
  openwebui:
    # -- Enables or disables the route
    enabled: true

    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: HTTPRoute

    # -- Provide additional labels which may be required.
    labels:
      wan-mode: 'public'
      lan-mode: 'private'

    hostnames:
      - ai.{{ .Values.cluster.name }}.{{ .Values.datacenter }}.{{ .Values.region }}.mylogin.space

    # -- Configure the resource the route attaches to.
    parentRefs:
      - # Group of the referent resource.
        group: gateway.networking.k8s.io

        # Kind of the referent resource.
        kind: Gateway

        # Name of the referent resource
        name: {{ $.Values.gateway.name }}

        sectionName: {{ $.Values.gateway.sectionName }}

        # Namespace of the referent resource
        namespace: {{ $.Values.gateway.namespace }}

    # -- Configure rules for routing. Defaults to the primary service.
    rules:
      - backendRefs:
          - kind: Service
            port: 80
            identifier: openwebui
            weight: 1
  {{- end }}



rbac:
  roles:
    {{- if and $.Values.docker.kubedock.enabled $.Values.docker.kubedock.rbac.create }}
    kubedock:
      # -- Enables or disables the Role. Can be templated.
      enabled: true
      # -- Set to Role,ClusterRole
      type: Role
      rules:
        - apiGroups:
            - ''
          resources: 
            - pods
          verbs: 
            - create
            - get
            - list
            - delete
            - watch

        - apiGroups:
            - ''
          resources:
            - pods/log
          verbs:
            - list
            - get

        - apiGroups:
            - ''
          resources: 
            - pods/exec
          verbs:
            - create

        - apiGroups:
            - ''
          resources:
            - services
          verbs:
            - create
            - get
            - list
            - delete

        - apiGroups:
            - ''
          resources:
            - configmaps
          verbs:
            - create
            - get
            - list
            - delete
    {{- end }}

  bindings:
    {{- if and $.Values.docker.kubedock.enabled $.Values.docker.kubedock.rbac.create }}
    kubedock:
      # -- Enables or disables the Role. Can be templated.
      enabled: true
      # -- Set to RoleBinding,ClusterRoleBinding
      type: RoleBinding
      # -- Can be an identifier of rbac.roles or a custom name and kind
      roleRef:
        identifier: kubedock
      # -- If using an identifier it will be automatically filled, otherwise every key will need to be explicitly declared
      subjects:
        - identifier: kubedock
    {{- end }}

{{- if and $.Values.docker.kubedock.enabled $.Values.docker.kubedock.rbac.create }}
serviceAccount:

  kubedock:
    forceRename: kubedock
    enabled: true
    annotations: {}
    labels: {}
{{- end }}

{{- end -}}
{{- $_ := mergeOverwrite .Values (include "app-template.hardcodedValues" . | fromYaml) -}}

{{/* Render the templates */}}
{{ include "bjw-s.common.loader.generate" . }}