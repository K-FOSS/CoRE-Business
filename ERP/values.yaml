erpnext:
  # Default values for erpnext.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  enabled: true

  # Configure external database host
  dbHost: 172.18.67.224
  dbPort: 3306
  # dbRootUser: ""
  # dbRootPassword: ""
  # dbRds: false

  image:
    repository: frappe/erpnext
    #tag: v14.21.0
    pullPolicy: IfNotPresent

  nginx:
    replicaCount: 1
    # config: |
    #   # custom conf /etc/nginx/conf.d/default.conf
    environment:
      upstreamRealIPAddress: "127.0.0.1"
      upstreamRealIPRecursive: "off"
      upstreamRealIPHeader: "X-Forwarded-For"
      frappeSiteNameHeader: "$host"
    livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    service:
      type: ClusterIP
      port: 8080
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    envVars: []
    initContainers: []
    sidecars: []

  worker:
    gunicorn:
      replicaCount: 1
      livenessProbe:
        tcpSocket:
          port: 8000
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 8000
        initialDelaySeconds: 5
        periodSeconds: 10
      service:
        type: ClusterIP
        port: 8000
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      args: []
      envVars: []
      initContainers: []
      sidecars: []

    default:
      replicaCount: 1
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      livenessProbe:
        override: false
        probe: {}
      readinessProbe:
        override: false
        probe: {}
      envVars: []
      initContainers: []
      sidecars: []

    short:
      replicaCount: 1
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      livenessProbe:
        override: false
        probe: {}
      readinessProbe:
        override: false
        probe: {}
      envVars: []
      initContainers: []
      sidecars: []

    long:
      replicaCount: 1
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      livenessProbe:
        override: false
        probe: {}
      readinessProbe:
        override: false
        probe: {}
      envVars: []
      initContainers: []
      sidecars: []

    scheduler:
      replicaCount: 1
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      livenessProbe:
        override: false
        probe: {}
      readinessProbe:
        override: false
        probe: {}
      envVars: []
      initContainers: []
      sidecars: []

    healthProbe: |
      exec:
        command:
          - bash
          - -c
          - echo "Ping backing services";
      initialDelaySeconds: 15
      periodSeconds: 5

  socketio:
    replicaCount: 1
    livenessProbe:
      tcpSocket:
        port: 9000
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 9000
      initialDelaySeconds: 5
      periodSeconds: 10
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    service:
      type: ClusterIP
      port: 9000
    envVars: []
    initContainers: []
    sidecars: []

  persistence:
    worker:
      enabled: true
      existingClaim: k0s-cntrl-erpnext
      size: 8Gi
      storageClass: infra1-storage
    logs:
      # Container based log search and analytics stack recommended
      enabled: false
      # existingClaim: ""
      size: 8Gi
      # storageClass: "nfs"

  # Ingress
  ingress:
    # ingressName: ""
    # className: ""
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
    - host: erp.cluster.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
    #  - secretName: auth-server-tls
    #    hosts:
    #      - auth-server.local

  jobs:
    volumePermissions:
      enabled: false
      backoffLimit: 0
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    configure:
      enabled: true
      fixVolume: true
      backoffLimit: 0
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    createSite:
      enabled: false
      forceCreate: false
      siteName: erp.mylogin.space
      adminPassword: "changeit"
      installApps:
      - "erpnext"
      dbType: "mariadb"
      backoffLimit: 0
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    dropSite:
      enabled: false
      forced: false
      siteName: "erp.cluster.local"
      backoffLimit: 0
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    backup:
      enabled: false
      siteName: "erp.cluster.local"
      withFiles: true
      backoffLimit: 0
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    migrate:
      enabled: false
      siteName: "erp.cluster.local"
      skipFailing: false
      backoffLimit: 0
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    custom:
      enabled: true
      jobName: "initstuff"
      labels: {}
      backoffLimit: 0

      initContainers:
        - args:
            - >
              export start=`date +%s`; until [[ -n `grep -hs ^
              sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
                [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
                [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
              do
                echo "Waiting for sites/common_site_config.json to be created";
                sleep 5;
                if (( `date +%s`-start > 600 )); then
                  echo "could not find sites/common_site_config.json with required keys";
                  exit 1
                fi
              done; echo "sites/common_site_config.json found";
          command:
            - bash
            - '-c'
          image: 'frappe/erpnext:v14.21.0'
          imagePullPolicy: IfNotPresent
          name: validate-config
          resources: {}
          securityContext:
            capabilities:
              add:
                - CAP_CHOWN
          volumeMounts:
            - mountPath: /home/frappe/frappe-bench/sites
              name: sites-dir
      containers:
        - args:
            - >
              bench new-site $(SITE_NAME) --db-name=erpnext --no-mariadb-socket
              --db-type=$(DB_TYPE) --db-host=$(DB_HOST) --db-port=$(DB_PORT)
              --admin-password=$(ADMIN_PASSWORD)
              --mariadb-root-username=$(DB_ROOT_USER)
              --mariadb-root-password=$(DB_ROOT_PASSWORD) --install-app=erpnext
              ;rm -f currentsite.txt
          command:
            - bash
            - '-c'
          env:
            - name: SITE_NAME
              value: erp.mylogin.space
            - name: DB_TYPE
              value: mariadb
            - name: DB_HOST
              value: 172.18.67.224
            - name: DB_PORT
              value: '3306'

            - name: DB_ROOT_USER
              value: 'root'

            - name: DB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql-admin-secret

            - name: ADMIN_PASSWORD
              value: changeit
          image: 'frappe/erpnext:v14.21.0'
          imagePullPolicy: IfNotPresent
          name: create-site
          resources: {}
          securityContext:
            capabilities:
              add:
                - CAP_CHOWN
          volumeMounts:
            - mountPath: /home/frappe/frappe-bench/sites
              name: sites-dir
            - mountPath: /home/frappe/frappe-bench/logs
              name: logs
      restartPolicy: Never
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: k0s-cntrl-erpnext
            readOnly: false
        - emptyDir: {}
          name: logs
      nodeSelector: {}
      affinity: {}
      tolerations: []

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true

  podSecurityContext:
    supplementalGroups: [1000]

  securityContext:
    capabilities:
      add:
      - CAP_CHOWN
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  redis-cache:
    # https://github.com/bitnami/charts/tree/master/bitnami/redis
    enabled: false
    host: redis://10.1.1.68/201
    architecture: standalone
    auth:
      enabled: false
      sentinal: false
    master:
      containerPorts:
        redis: 6379
      persistence:
        enabled: false

  redis-queue:
    # https://github.com/bitnami/charts/tree/master/bitnami/redis
    enabled: false
    host: redis://10.1.1.68/202
    architecture: standalone
    auth:
      enabled: false
      sentinal: false
    master:
      containerPorts:
        redis: 6379
      persistence:
        enabled: false

  redis-socketio:
    # https://github.com/bitnami/charts/tree/master/bitnami/redis
    enabled: false
    host: redis://10.1.1.68/203
    architecture: standalone
    auth:
      enabled: false
      sentinal: false
    master:
      containerPorts:
        redis: 6379
      persistence:
        enabled: false

  mariadb:
    # https://github.com/bitnami/charts/tree/master/bitnami/mariadb
    enabled: false
    auth:
      rootPassword: "changeit"
      username: "erpnext"
      password: "changeit"
      replicationPassword: "changeit"

    primary:
      service:
        ports:
          mysql: 3306
      configuration: |-
        [mysqld]
        skip-name-resolve
        explicit_defaults_for_timestamp
        basedir=/opt/bitnami/mariadb
        plugin_dir=/opt/bitnami/mariadb/plugin
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        tmpdir=/opt/bitnami/mariadb/tmp
        max_allowed_packet=16M
        bind-address=*
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
        log-error=/opt/bitnami/mariadb/logs/mysqld.log
        slow_query_log=0
        slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
        long_query_time=10.0

        # Frappe Specific Changes
        character-set-client-handshake=FALSE
        character-set-server=utf8mb4
        collation-server=utf8mb4_unicode_ci

        [client]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        plugin_dir=/opt/bitnami/mariadb/plugin

        # Frappe Specific Changes
        default-character-set=utf8mb4

        [manager]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

  postgresql:
    # https://github.com/bitnami/charts/tree/master/bitnami/postgresql
    enabled: false
    # host: ""
    auth:
      username: "postgres"
      postgresPassword: "changeit"
    primary:
      service:
        ports:
          postgresql: 5432
