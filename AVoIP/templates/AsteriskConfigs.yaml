{{- $fullName := include "avoip.fullname" . -}}
---
apiVersion: v1
kind: ConfigMap

metadata:
  name: {{ $fullName }}-asterisk-configs

data:
  logger.conf: |
    ;
    ; Logging Configuration
    ;
    ; In this file, you configure logging to files or to
    ; the syslog system.
    ;
    ; "logger reload" at the CLI will reload configuration
    ; of the logging system.

    [general]
    ;
    ; Customize the display of debug message time stamps
    ; this example is the ISO 8601 date format (yyyy-mm-dd HH:MM:SS)
    ;
    ; see strftime(3) Linux manual for format specifiers.  Note that there is also
    ; a fractional second parameter which may be used in this field.  Use %1q
    ; for tenths, %2q for hundredths, etc.
    ;
    ;dateformat=%F %T       ; ISO 8601 date format
    ;dateformat=%F %T.%3q   ; with milliseconds
    ;
    ;
    ; This makes Asterisk write callids to log messages
    ; (defaults to yes)
    ;use_callids = no
    ;
    ; This appends the hostname to the name of the log files.
    ;appendhostname = yes
    ;
    ; This determines whether or not we log queue events to a file
    ; (defaults to yes).
    ;queue_log = no
    ;
    ; Determines whether the queue_log always goes to a file, even
    ; when a realtime backend is present (defaults to no).
    ;queue_log_to_file = yes
    ;
    ; Set the queue_log filename
    ; (defaults to queue_log)
    ;queue_log_name = queue_log
    ;
    ; When using realtime for the queue log, use GMT for the timestamp
    ; instead of localtime.  The default of this option is 'no'.
    ;queue_log_realtime_use_gmt = yes
    ;
    ; Log rotation strategy:
    ; none:  Do not perform any logrotation at all.  You should make
    ;        very sure to set up some external logrotate mechanism
    ;        as the asterisk logs can get very large, very quickly.
    ; sequential:  Rename archived logs in order, such that the newest
    ;              has the highest sequence number [default].  When
    ;              exec_after_rotate is set, ${filename} will specify
    ;              the new archived logfile.
    ; rotate:  Rotate all the old files, such that the oldest has the
    ;          highest sequence number [this is the expected behavior
    ;          for Unix administrators].  When exec_after_rotate is
    ;          set, ${filename} will specify the original root filename.
    ; timestamp:  Rename the logfiles using a timestamp instead of a
    ;             sequence number when "logger rotate" is executed.
    ;             When exec_after_rotate is set, ${filename} will
    ;             specify the new archived logfile.
    ;rotatestrategy = rotate
    ;
    ; Run a system command after rotating the files.  This is mainly
    ; useful for rotatestrategy=rotate. The example allows the last
    ; two archive files to remain uncompressed, but after that point,
    ; they are compressed on disk.
    ;
    ; exec_after_rotate=gzip -9 ${filename}.2
    ;
    ;
    ; For each file, specify what to log.
    ;
    ; For console logging, you set options at start of
    ; Asterisk with -v for verbose and -d for debug
    ; See 'asterisk -h' for more information.
    ;
    ; Directory for log files is configures in asterisk.conf
    ; option astlogdir
    ;
    ; All log messages go to a queue serviced by a single thread
    ; which does all the IO.  This setting controls how big that
    ; queue can get (and therefore how much memory is allocated)
    ; before new messages are discarded.
    ; The default is 1000
    ;logger_queue_limit = 250
    ;
    ; Any custom logging levels you may want to use, which can then
    ; be sent to logging channels. The maximum number of custom
    ; levels is 16, but not all of these may be available if modules
    ; in Asterisk define their own.
    ;custom_levels = foobar,important,compliance
    ;
    [logfiles]
    ;
    ; Format is:
    ;
    ; logger_name => [formatter]levels
    ;
    ; The name of the logger dictates not only the name of the logging
    ; channel, but also its type. Valid types are:
    ;   - 'console'  - The root console of Asterisk
    ;   - 'syslog'   - Linux syslog, with facilities specified afterwards with
    ;                  a period delimiter, e.g., 'syslog.local0'
    ;   - 'filename' - The name of the log file to create. This is the default
    ;                  for log channels.
    ;
    ; Filenames can either be relative to the standard Asterisk log directory
    ; (see 'astlogdir' in asterisk.conf), or absolute paths that begin with
    ; '/'.
    ;
    ; An optional formatter can be specified prior to the log levels sent
    ; to the log channel. The formatter is defined immediately preceeding the
    ; levels, and is enclosed in square brackets. Valid formatters are:
    ;   - [default] - The default formatter, this outputs log messages using a
    ;                 human readable format.
    ;   - [plain]   - The plain formatter, this outputs log messages using a
    ;                 human readable format with the addition of function name
    ;                 and line number. No color escape codes are ever printed
    ;                 nor are verbose messages treated specially.
    ;   - [json]    - Log the output in JSON. Note that JSON formatted log entries,
    ;                 if specified for a logger type of 'console', will be formatted
    ;                 per the 'default' formatter for log messages of type VERBOSE.
    ;                 This is due to the remote consoles interpreting verbosity
    ;                 outside of the logging subsystem.
    ;
    ; Log levels include the following, and are specified in a comma delineated
    ; list:
    ;    debug
    ;    trace
    ;    notice
    ;    warning
    ;    error
    ;    verbose(<level>)
    ;    dtmf
    ;    fax
    ;    security
    ;    <customlevel>
    ;
    ; Verbose takes an optional argument, in the form of an integer level. The
    ; verbose level can be set per logfile. Verbose messages with higher levels
    ; will not be logged to the file.  If the verbose level is not specified, it
    ; will log verbose messages following the current level of the root console.
    ;
    ; Debug has multiple levels like verbose. However, it is a system wide setting
    ; and cannot be specified per logfile. You specify the debug level elsewhere
    ; such as the CLI 'core set debug 3', starting Asterisk with '-ddd', or in
    ; asterisk.conf 'debug=3'.
    ;
    ; Special level name "*" means all levels, even dynamic levels registered
    ; by modules after the logger has been initialized (this means that loading
    ; and unloading modules that create/remove dynamic logger levels will result
    ; in these levels being included on filenames that have a level name of "*",
    ; without any need to perform a 'logger reload' or similar operation).
    ; Note that there is no value in specifying both "*" and specific level names
    ; for a filename; the "*" level means all levels.  The only exception is if
    ; you need to specify a specific verbose level. e.g, "verbose(3),*".
    ;
    ; We highly recommend that you DO NOT turn on debug mode if you are simply
    ; running a production system.  Debug mode turns on a LOT of extra messages,
    ; most of which you are unlikely to understand without an understanding of
    ; the underlying code.  Do NOT report debug messages as code issues, unless
    ; you have a specific issue that you are attempting to debug.  They are
    ; messages for just that -- debugging -- and do not rise to the level of
    ; something that merit your attention as an Asterisk administrator.  Both
    ; debug and trace messages are also very verbose and can and do fill up
    ; logfiles quickly.  This is another reason not to have debug or trace
    ; modes on a production system unless you are in the process of debugging
    ; a specific issue.
    ;
    ;debug.log => error,warning,notice,verbose,debug
    ;trace.log => trace
    ;security.log => security
    console => notice,warning,error,debug
    ;console => notice,warning,error,debug
    messages.log => notice,warning,error
    ;full.log => notice,warning,error,debug,verbose,dtmf,fax
    ;
    ;full-json.log => [json]debug,verbose,notice,warning,error,dtmf,fax
    ;
    ;syslog keyword : This special keyword logs to syslog facility
    ;
    ;syslog.local0 => notice,warning,error
    ;
    ; A log level defined in 'custom_levels' above
    ;important.log = important
  rtp.conf: |
    ;
    ; RTP Configuration
    ;
    [general]
    ;
    ; RTP start and RTP end configure start and end addresses
    ;
    ; Defaults are rtpstart=5000 and rtpend=31000
    ;
    rtpstart={{ .Values.asterisk.rtp.min }}
    rtpend={{ .Values.asterisk.rtp.max }}

    ;
    ; Whether to enable or disable UDP checksums on RTP traffic
    ;
    ;rtpchecksums=no
    ;
    ; The amount of time a DTMF digit with no 'end' marker should be
    ; allowed to continue (in 'samples', 1/8000 of a second)
    ;
    ;dtmftimeout=3000
    ; rtcpinterval = 5000 	; Milliseconds between rtcp reports
          ;(min 500, max 60000, default 5000)
    ;
    ; Enable strict RTP protection.  This will drop RTP packets that do not come
    ; from the recognized source of the RTP stream.  Strict RTP qualifies RTP
    ; packet stream sources before accepting them upon initial connection and
    ; when the connection is renegotiated (e.g., transfers and direct media).
    ; Initial connection and renegotiation starts a learning mode to qualify
    ; stream source addresses.  Once Asterisk has recognized a stream it will
    ; allow other streams to qualify and replace the current stream for 5
    ; seconds after starting learning mode.  Once learning mode completes the
    ; current stream is locked in and cannot change until the next
    ; renegotiation.
    ; Valid options are "no" to disable strictrtp, "yes" to enable strictrtp,
    ; and "seqno", which does the same thing as strictrtp=yes, but only checks
    ; to make sure the sequence number is correct rather than checking the time
    ; interval as well.
    ; This option is enabled by default.
    ; strictrtp=yes
    ;
    ; Number of packets containing consecutive sequence values needed
    ; to change the RTP source socket address. This option only comes
    ; into play while using strictrtp=yes. Consider changing this value
    ; if rtp packets are dropped from one or both ends after a call is
    ; connected. This option is set to 4 by default.
    ; probation=8
    ;
    ; Enable sRTP replay protection. Buggy SIP user agents (UAs) reset the
    ; sequence number (RTP-SEQ) on a re-INVITE, for example, with Session Timers
    ; or on Call Hold/Resume, but keep the synchronization source (RTP-SSRC). If
    ; the new RTP-SEQ is higher than the previous one, the call continues if the
    ; roll-over counter (sRTP-ROC) is zero (the call lasted less than 22 minutes).
    ; In all other cases, the call faces one-way audio or even no audio at all.
    ; "replay check failed (index too old)" gets printed continuously. This is a
    ; software bug. You have to report this to the creator of that UA. Until it is
    ; fixed, you could disable sRTP replay protection (see RFC 3711 section 3.3.2).
    ; This option is enabled by default.
    ; srtpreplayprotection=yes
    ;
    ; Whether to enable or disable ICE support. This option is enabled by default.
    icesupport=true
    ;
    ; Hostname or address for the STUN server used when determining the external
    ; IP address and port an RTP session can be reached at. The port number is
    ; optional. If omitted the default value of 3478 will be used. This option is
    ; disabled by default. Name resolution will occur at load time, and if DNS is
    ; used, name resolution will occur repeatedly after the TTL expires.
    ;
    ; e.g. stundaddr=mystun.server.com:3478
    ;
    stunaddr=nat.ipaddr.network:3478

    ;
    ; Some multihomed servers have IP interfaces that cannot reach the STUN
    ; server specified by stunaddr.  Blacklist those interface subnets from
    ; trying to send a STUN packet to find the external IP address.
    ; Attempting to send the STUN packet needlessly delays processing incoming
    ; and outgoing SIP INVITEs because we will wait for a response that can
    ; never come until we give up on the response.
    ; * Multiple subnets may be listed.
    ; * Blacklisting applies to IPv4 only.  STUN isn't needed for IPv6.
    ; * Blacklisting applies when binding RTP to specific IP addresses and not
    ; the wildcard 0.0.0.0 address.  e.g., A PJSIP endpoint binding RTP to a
    ; specific address using the bind_rtp_to_media_address and media_address
    ; options.  Or the PJSIP endpoint specifies an explicit transport that binds
    ; to a specific IP address.  Blacklisting is done via ACL infrastructure
    ; so it's possible to whitelist as well.
    ;
    ; stun_acl = named_acl
    ; stun_deny = 0.0.0.0/0
    ; stun_permit = 1.2.3.4/32
    ;
    ; For historic reasons stun_blacklist is an alias for stun_deny.
    ;
    ; Whether to report the PJSIP version in a SOFTWARE attribute for all
    ; outgoing STUN packets. This option is enabled by default.
    ;
    ; stun_software_attribute=yes
    ;
    ; Hostname or address for the TURN server to be used as a relay. The port
    ; number is optional. If omitted the default value of 3478 will be used.
    ; This option is disabled by default.
    ;
    ; e.g. turnaddr=myturn.server.com:34780
    ;
    turnaddr=nat.ipaddr.network:3478
    ;
    ; Username used to authenticate with TURN relay server.
    turnusername=demo
    ;
    ; Password used to authenticate with TURN relay server.
    turnpassword=secret
    ;
    ; An ACL can be used to determine which discovered addresses to include for
    ; ICE, srflx and relay discovery.  This is useful to optimize the ICE process
    ; where a system has multiple host address ranges and/or physical interfaces
    ; and certain of them are not expected to be used for RTP. For example, VPNs
    ; and local interconnections may not be suitable or necessary for ICE. Multiple
    ; subnets may be listed. If left unconfigured, all discovered host addresses
    ; are used.
    ;
    ; ice_acl = named_acl
    ; ice_deny = 0.0.0.0/0
    ; ice_permit = 1.2.3.4/32
    ;
    ; For historic reasons ice_blacklist is an alias for ice_deny.
    ;
    ; The MTU to use for DTLS packet fragmentation. This option is set to 1200
    ; by default. The minimum MTU is 256.
    ; dtls_mtu = 1200
    ;
    [ice_host_candidates]
    ;
    ; When Asterisk is behind a static one-to-one NAT and ICE is in use, ICE will
    ; expose the server's internal IP address as one of the host candidates.
    ; Although using STUN (see the 'stunaddr' configuration option) will provide a
    ; publicly accessible IP, the internal IP will still be sent to the remote
    ; peer. To help hide the topology of your internal network, you can override
    ; the host candidates that Asterisk will send to the remote peer.
    ;
    ; IMPORTANT: Only use this functionality when your Asterisk server is behind a
    ; one-to-one NAT and you know what you're doing. If you do define anything
    ; here, you almost certainly will NOT want to specify 'stunaddr' or 'turnaddr'
    ; above.
    ;
    ; The format for these overrides is:
    ;
    ;    <local address> => <advertised address>,[include_local_address]
    ;
    ; The following will replace 192.168.1.10 with 1.2.3.4 during ICE
    ; negotiation:
    ;
    ;192.168.1.10 => 1.2.3.4
    ;
    ; The following will include BOTH 192.168.1.10 and 1.2.3.4 during ICE
    ; negotiation instead of replacing 192.168.1.10.  This can make it easier
    ; to serve both local and remote clients.
    ;
    ;192.168.1.10 => 1.2.3.4,include_local_address
    ;
    ; You can define an override for more than 1 interface if you have a multihomed
    ; server. Any local interface that is not matched will be passed through
    ; unaltered. Both IPv4 and IPv6 addresses are supported.

  extensions.conf: |
    [general]
    static=yes
    writeprotect=no
    clearglobalvars=no



    [globals]
    CONSOLE=Console/dsp				; Console interface for demo
    IAXINFO=guest					; IAXtel username/password
    TRUNK=DAHDI/G2					; Trunk interface
    TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)

    [from-external]
    exten => 18077893501,1,Answer()	; Let them know what's going on
    same => n,Echo()			; Do the echo test
    same => n,Playback(demo-echodone)	; Let them know it's over
    same => n,Goto(s,6)		; Start over

    [from-internal]
    exten => 8080,1,Answer()
    same => n,MixMonitor(/var/spool/asterisk/monitor/recordings/call-8080-${STRFTIME(${EPOCH},,%C%y%m%d%H%M%S)}.wav)
    same => n,Playback(demo-instruct)
    same => n,Hangup()


    exten => 8081,1,Answer()
    same => n,MixMonitor(/var/spool/asterisk/monitor/recordings/call-8081-${STRFTIME(${EPOCH},,%C%y%m%d%H%M%S)}.wav)
    same => n,Wait(10)
    same => n,Hangup()

  res_stun_monitor.conf: |
    ;
    ; Configuration file for the res_stun_monitor module
    ;
    ; The res_stun_monitor module sends STUN requests to a configured STUN server
    ; periodically.  If the monitor detects a change in the external IP address or port
    ; provided by the STUN server an event is sent out internally within Asterisk
    ; to alert all listeners to that event of the change.

    ; The current default listeners for the network change event include chan_sip
    ; and chan_iax.  Both of these channel drivers by default react to this event
    ; by renewing all outbound registrations.  This allows the endpoints Asterisk
    ; is registering with to become aware of the address change and know the new
    ; location.
    ;
    [general]
    ;
    ; ---- STUN Server configuration ---
    ;  Setting the 'stunaddr' option to a valid address enables the STUN monitor.
    ;
    ;stunaddr = nat.ipaddr.network:3478    ; Address of the STUN server to query.
                                    ; Valid form:
                                    ;   [(hostname | IP-address) [':' port]]
                                    ; The port defaults to the standard STUN port (3478).
                                    ; Set to an empty value to disable STUN monitoring.
                                    ;   Default is disabled.
    ;stunrefresh = 30               ; Number of seconds between STUN refreshes.
                                    ;   Default is 30.
