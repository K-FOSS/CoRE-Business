{{- $fullName := include "avoip.fullname" . -}}
---
apiVersion: v1
kind: ConfigMap

metadata:
  name: {{ $fullName }}-asterisk-configs

data:
  asterisk.conf: |
    [options]
    ; If we want to start Asterisk with a default verbosity for the verbose
    ; or debug logger channel types, then we use these settings (by default
    ; they are disabled).
    ;verbose = 5
    ;debug = 2

    ; User and group to run asterisk as. NOTE: This will require changes to
    ; directory and device permissions.
    ;runuser = asterisk             ; The user to run as. The default is root.
    ;rungroup = asterisk            ; The group to run as. The default is root

    ;defaultlanguage = en

  modules.conf: |
    ;
    ; Asterisk configuration file
    ;
    ; Module Loader configuration file
    ;

    [modules]
    autoload=yes
    ;
    ; Any modules that need to be loaded before the Asterisk core has been
    ; initialized (just after the logger initialization) can be loaded
    ; using 'preload'.  'preload' forces a module and the modules it
    ; is known to depend upon to be loaded earlier than they normally get
    ; loaded.
    ;
    ; NOTE: There is no good reason left to use 'preload' anymore.  It was
    ; historically required to preload realtime driver modules so you could
    ; map Asterisk core configuration files to Realtime storage.
    ; This is no longer needed.
    ;
    ;preload = res_http_media_cache.so
    ;
    ; If you want Asterisk to fail if a module does not load, then use
    ; the "require" keyword. Asterisk will exit with a status code of 2
    ; if a required module does not load.
    ;
    require = chan_pjsip.so
    require = res_http_media_cache.so
    ;
    ; If you want you can combine with preload
    ; preload-require = your_special_module.so
    ;
    ;load = res_musiconhold.so
    ;
    ; Load one of: alsa, or console (portaudio).
    ; By default, load chan_console only (automatically).
    ;
    ;noload = chan_alsa.so
    ;noload = chan_console.so
    ;
    ; Do not load res_hep and kin unless you are using HEP monitoring
    ; <http://sipcapture.org> in your network.
    ;
    noload = res_hep.so
    noload = res_hep_pjsip.so
    noload = res_hep_rtcp.so
    ;
    ; Do not load chan_sip by default, it may conflict with res_pjsip.
    noload = chan_sip.so
    ;
    ; Load one of the voicemail modules as they are mutually exclusive.
    ; By default, load app_voicemail only (automatically).
    ;
    ;noload = app_voicemail.so
    noload = app_voicemail_imap.so
    noload = app_voicemail_odbc.so
  logger.conf: |
    ;
    ; Logging Configuration
    ;
    ; In this file, you configure logging to files or to
    ; the syslog system.
    ;
    ; "logger reload" at the CLI will reload configuration
    ; of the logging system.

    [general]
    ;
    ; Customize the display of debug message time stamps
    ; this example is the ISO 8601 date format (yyyy-mm-dd HH:MM:SS)
    ;
    ; see strftime(3) Linux manual for format specifiers.  Note that there is also
    ; a fractional second parameter which may be used in this field.  Use %1q
    ; for tenths, %2q for hundredths, etc.
    ;
    ;dateformat=%F %T       ; ISO 8601 date format
    ;dateformat=%F %T.%3q   ; with milliseconds
    ;
    ;
    ; This makes Asterisk write callids to log messages
    ; (defaults to yes)
    ;use_callids = no
    ;
    ; This appends the hostname to the name of the log files.
    ;appendhostname = yes
    ;
    ; This determines whether or not we log queue events to a file
    ; (defaults to yes).
    ;queue_log = no
    ;
    ; Determines whether the queue_log always goes to a file, even
    ; when a realtime backend is present (defaults to no).
    ;queue_log_to_file = yes
    ;
    ; Set the queue_log filename
    ; (defaults to queue_log)
    ;queue_log_name = queue_log
    ;
    ; When using realtime for the queue log, use GMT for the timestamp
    ; instead of localtime.  The default of this option is 'no'.
    ;queue_log_realtime_use_gmt = yes
    ;
    ; Log rotation strategy:
    ; none:  Do not perform any logrotation at all.  You should make
    ;        very sure to set up some external logrotate mechanism
    ;        as the asterisk logs can get very large, very quickly.
    ; sequential:  Rename archived logs in order, such that the newest
    ;              has the highest sequence number [default].  When
    ;              exec_after_rotate is set, ${filename} will specify
    ;              the new archived logfile.
    ; rotate:  Rotate all the old files, such that the oldest has the
    ;          highest sequence number [this is the expected behavior
    ;          for Unix administrators].  When exec_after_rotate is
    ;          set, ${filename} will specify the original root filename.
    ; timestamp:  Rename the logfiles using a timestamp instead of a
    ;             sequence number when "logger rotate" is executed.
    ;             When exec_after_rotate is set, ${filename} will
    ;             specify the new archived logfile.
    ;rotatestrategy = rotate
    ;
    ; Run a system command after rotating the files.  This is mainly
    ; useful for rotatestrategy=rotate. The example allows the last
    ; two archive files to remain uncompressed, but after that point,
    ; they are compressed on disk.
    ;
    ; exec_after_rotate=gzip -9 ${filename}.2
    ;
    ;
    ; For each file, specify what to log.
    ;
    ; For console logging, you set options at start of
    ; Asterisk with -v for verbose and -d for debug
    ; See 'asterisk -h' for more information.
    ;
    ; Directory for log files is configures in asterisk.conf
    ; option astlogdir
    ;
    ; All log messages go to a queue serviced by a single thread
    ; which does all the IO.  This setting controls how big that
    ; queue can get (and therefore how much memory is allocated)
    ; before new messages are discarded.
    ; The default is 1000
    ;logger_queue_limit = 250
    ;
    ; Any custom logging levels you may want to use, which can then
    ; be sent to logging channels. The maximum number of custom
    ; levels is 16, but not all of these may be available if modules
    ; in Asterisk define their own.
    ;custom_levels = foobar,important,compliance
    ;
    [logfiles]
    ;
    ; Format is:
    ;
    ; logger_name => [formatter]levels
    ;
    ; The name of the logger dictates not only the name of the logging
    ; channel, but also its type. Valid types are:
    ;   - 'console'  - The root console of Asterisk
    ;   - 'syslog'   - Linux syslog, with facilities specified afterwards with
    ;                  a period delimiter, e.g., 'syslog.local0'
    ;   - 'filename' - The name of the log file to create. This is the default
    ;                  for log channels.
    ;
    ; Filenames can either be relative to the standard Asterisk log directory
    ; (see 'astlogdir' in asterisk.conf), or absolute paths that begin with
    ; '/'.
    ;
    ; An optional formatter can be specified prior to the log levels sent
    ; to the log channel. The formatter is defined immediately preceeding the
    ; levels, and is enclosed in square brackets. Valid formatters are:
    ;   - [default] - The default formatter, this outputs log messages using a
    ;                 human readable format.
    ;   - [plain]   - The plain formatter, this outputs log messages using a
    ;                 human readable format with the addition of function name
    ;                 and line number. No color escape codes are ever printed
    ;                 nor are verbose messages treated specially.
    ;   - [json]    - Log the output in JSON. Note that JSON formatted log entries,
    ;                 if specified for a logger type of 'console', will be formatted
    ;                 per the 'default' formatter for log messages of type VERBOSE.
    ;                 This is due to the remote consoles interpreting verbosity
    ;                 outside of the logging subsystem.
    ;
    ; Log levels include the following, and are specified in a comma delineated
    ; list:
    ;    debug
    ;    trace
    ;    notice
    ;    warning
    ;    error
    ;    verbose(<level>)
    ;    dtmf
    ;    fax
    ;    security
    ;    <customlevel>
    ;
    ; Verbose takes an optional argument, in the form of an integer level. The
    ; verbose level can be set per logfile. Verbose messages with higher levels
    ; will not be logged to the file.  If the verbose level is not specified, it
    ; will log verbose messages following the current level of the root console.
    ;
    ; Debug has multiple levels like verbose. However, it is a system wide setting
    ; and cannot be specified per logfile. You specify the debug level elsewhere
    ; such as the CLI 'core set debug 3', starting Asterisk with '-ddd', or in
    ; asterisk.conf 'debug=3'.
    ;
    ; Special level name "*" means all levels, even dynamic levels registered
    ; by modules after the logger has been initialized (this means that loading
    ; and unloading modules that create/remove dynamic logger levels will result
    ; in these levels being included on filenames that have a level name of "*",
    ; without any need to perform a 'logger reload' or similar operation).
    ; Note that there is no value in specifying both "*" and specific level names
    ; for a filename; the "*" level means all levels.  The only exception is if
    ; you need to specify a specific verbose level. e.g, "verbose(3),*".
    ;
    ; We highly recommend that you DO NOT turn on debug mode if you are simply
    ; running a production system.  Debug mode turns on a LOT of extra messages,
    ; most of which you are unlikely to understand without an understanding of
    ; the underlying code.  Do NOT report debug messages as code issues, unless
    ; you have a specific issue that you are attempting to debug.  They are
    ; messages for just that -- debugging -- and do not rise to the level of
    ; something that merit your attention as an Asterisk administrator.  Both
    ; debug and trace messages are also very verbose and can and do fill up
    ; logfiles quickly.  This is another reason not to have debug or trace
    ; modes on a production system unless you are in the process of debugging
    ; a specific issue.
    ;
    ;debug.log => error,warning,notice,verbose,debug
    ;trace.log => trace
    ;security.log => security
    console => notice,warning,error,verbose,debug
    ;console => notice,warning,error,debug
    messages.log => notice,warning,error
    ;full.log => notice,warning,error,debug,verbose,dtmf,fax
    ;
    ;full-json.log => [json]debug,verbose,notice,warning,error,dtmf,fax
    ;
    ;syslog keyword : This special keyword logs to syslog facility
    ;
    ;syslog.local0 => notice,warning,error
    ;
    ; A log level defined in 'custom_levels' above
    ;important.log = important
  rtp.conf: |
    ;
    ; RTP Configuration
    ;
    [general]
    ;
    ; RTP start and RTP end configure start and end addresses
    ;
    ; Defaults are rtpstart=5000 and rtpend=31000
    ;
    rtpstart={{ .Values.asterisk.rtp.min }}
    rtpend={{ .Values.asterisk.rtp.max }}

    ;
    ; Whether to enable or disable UDP checksums on RTP traffic
    ;
    ;rtpchecksums=no
    ;
    ; The amount of time a DTMF digit with no 'end' marker should be
    ; allowed to continue (in 'samples', 1/8000 of a second)
    ;
    ;dtmftimeout=3000
    ; rtcpinterval = 5000 	; Milliseconds between rtcp reports
          ;(min 500, max 60000, default 5000)
    ;
    ; Enable strict RTP protection.  This will drop RTP packets that do not come
    ; from the recognized source of the RTP stream.  Strict RTP qualifies RTP
    ; packet stream sources before accepting them upon initial connection and
    ; when the connection is renegotiated (e.g., transfers and direct media).
    ; Initial connection and renegotiation starts a learning mode to qualify
    ; stream source addresses.  Once Asterisk has recognized a stream it will
    ; allow other streams to qualify and replace the current stream for 5
    ; seconds after starting learning mode.  Once learning mode completes the
    ; current stream is locked in and cannot change until the next
    ; renegotiation.
    ; Valid options are "no" to disable strictrtp, "yes" to enable strictrtp,
    ; and "seqno", which does the same thing as strictrtp=yes, but only checks
    ; to make sure the sequence number is correct rather than checking the time
    ; interval as well.
    ; This option is enabled by default.
    ; strictrtp=yes
    ;
    ; Number of packets containing consecutive sequence values needed
    ; to change the RTP source socket address. This option only comes
    ; into play while using strictrtp=yes. Consider changing this value
    ; if rtp packets are dropped from one or both ends after a call is
    ; connected. This option is set to 4 by default.
    ; probation=8
    ;
    ; Enable sRTP replay protection. Buggy SIP user agents (UAs) reset the
    ; sequence number (RTP-SEQ) on a re-INVITE, for example, with Session Timers
    ; or on Call Hold/Resume, but keep the synchronization source (RTP-SSRC). If
    ; the new RTP-SEQ is higher than the previous one, the call continues if the
    ; roll-over counter (sRTP-ROC) is zero (the call lasted less than 22 minutes).
    ; In all other cases, the call faces one-way audio or even no audio at all.
    ; "replay check failed (index too old)" gets printed continuously. This is a
    ; software bug. You have to report this to the creator of that UA. Until it is
    ; fixed, you could disable sRTP replay protection (see RFC 3711 section 3.3.2).
    ; This option is enabled by default.
    ; srtpreplayprotection=yes
    ;
    ; Whether to enable or disable ICE support. This option is enabled by default.
    icesupport=true
    ;
    ; Hostname or address for the STUN server used when determining the external
    ; IP address and port an RTP session can be reached at. The port number is
    ; optional. If omitted the default value of 3478 will be used. This option is
    ; disabled by default. Name resolution will occur at load time, and if DNS is
    ; used, name resolution will occur repeatedly after the TTL expires.
    ;
    ; e.g. stundaddr=mystun.server.com:3478
    ;
    stunaddr=nat.ipaddr.network:3478

    ;
    ; Some multihomed servers have IP interfaces that cannot reach the STUN
    ; server specified by stunaddr.  Blacklist those interface subnets from
    ; trying to send a STUN packet to find the external IP address.
    ; Attempting to send the STUN packet needlessly delays processing incoming
    ; and outgoing SIP INVITEs because we will wait for a response that can
    ; never come until we give up on the response.
    ; * Multiple subnets may be listed.
    ; * Blacklisting applies to IPv4 only.  STUN isn't needed for IPv6.
    ; * Blacklisting applies when binding RTP to specific IP addresses and not
    ; the wildcard 0.0.0.0 address.  e.g., A PJSIP endpoint binding RTP to a
    ; specific address using the bind_rtp_to_media_address and media_address
    ; options.  Or the PJSIP endpoint specifies an explicit transport that binds
    ; to a specific IP address.  Blacklisting is done via ACL infrastructure
    ; so it's possible to whitelist as well.
    ;
    ; stun_acl = named_acl
    ; stun_deny = 0.0.0.0/0
    ; stun_permit = 1.2.3.4/32
    ;
    ; For historic reasons stun_blacklist is an alias for stun_deny.
    ;
    ; Whether to report the PJSIP version in a SOFTWARE attribute for all
    ; outgoing STUN packets. This option is enabled by default.
    ;
    ; stun_software_attribute=yes
    ;
    ; Hostname or address for the TURN server to be used as a relay. The port
    ; number is optional. If omitted the default value of 3478 will be used.
    ; This option is disabled by default.
    ;
    ; e.g. turnaddr=myturn.server.com:34780
    ;
    turnaddr=nat.ipaddr.network:3478
    ;
    ; Username used to authenticate with TURN relay server.
    turnusername=demo
    ;
    ; Password used to authenticate with TURN relay server.
    turnpassword=secret
    ;
    ; An ACL can be used to determine which discovered addresses to include for
    ; ICE, srflx and relay discovery.  This is useful to optimize the ICE process
    ; where a system has multiple host address ranges and/or physical interfaces
    ; and certain of them are not expected to be used for RTP. For example, VPNs
    ; and local interconnections may not be suitable or necessary for ICE. Multiple
    ; subnets may be listed. If left unconfigured, all discovered host addresses
    ; are used.
    ;
    ; ice_acl = named_acl
    ; ice_deny = 0.0.0.0/0
    ; ice_permit = 1.2.3.4/32
    ;
    ; For historic reasons ice_blacklist is an alias for ice_deny.
    ;
    ; The MTU to use for DTLS packet fragmentation. This option is set to 1200
    ; by default. The minimum MTU is 256.
    ; dtls_mtu = 1200
    ;
    [ice_host_candidates]
    ;
    ; When Asterisk is behind a static one-to-one NAT and ICE is in use, ICE will
    ; expose the server's internal IP address as one of the host candidates.
    ; Although using STUN (see the 'stunaddr' configuration option) will provide a
    ; publicly accessible IP, the internal IP will still be sent to the remote
    ; peer. To help hide the topology of your internal network, you can override
    ; the host candidates that Asterisk will send to the remote peer.
    ;
    ; IMPORTANT: Only use this functionality when your Asterisk server is behind a
    ; one-to-one NAT and you know what you're doing. If you do define anything
    ; here, you almost certainly will NOT want to specify 'stunaddr' or 'turnaddr'
    ; above.
    ;
    ; The format for these overrides is:
    ;
    ;    <local address> => <advertised address>,[include_local_address]
    ;
    ; The following will replace 192.168.1.10 with 1.2.3.4 during ICE
    ; negotiation:
    ;
    ;192.168.1.10 => 1.2.3.4
    ;
    ; The following will include BOTH 192.168.1.10 and 1.2.3.4 during ICE
    ; negotiation instead of replacing 192.168.1.10.  This can make it easier
    ; to serve both local and remote clients.
    ;
    ;192.168.1.10 => 1.2.3.4,include_local_address
    ;
    ; You can define an override for more than 1 interface if you have a multihomed
    ; server. Any local interface that is not matched will be passed through
    ; unaltered. Both IPv4 and IPv6 addresses are supported.

  extensions.conf: |
    ; extensions.conf - the Asterisk dial plan
    ;
    ; Static extension configuration file, used by
    ; the pbx_config module. This is where you configure all your
    ; inbound and outbound calls in Asterisk.
    ;
    ; This configuration file is reloaded
    ; - With the "dialplan reload" command in the CLI
    ; - With the "reload" command (that reloads everything) in the CLI

    ;
    ; The "General" category is for certain variables.
    ;
    [general]
    ;
    ; If static is set to no, or omitted, then the pbx_config will rewrite
    ; this file when extensions are modified.  Remember that all comments
    ; made in the file will be lost when that happens.
    ;
    ; XXX Not yet implemented XXX
    ;
    static=yes
    ;
    ; if static=yes and writeprotect=no, you can save dialplan by
    ; CLI command "dialplan save" too
    ;
    writeprotect=no
    ;
    ; If autofallthrough is set, then if an extension runs out of
    ; things to do, it will terminate the call with BUSY, CONGESTION
    ; or HANGUP depending on Asterisk's best guess. This is the default.
    ;
    ; If autofallthrough is not set, then if an extension runs out of
    ; things to do, Asterisk will wait for a new extension to be dialed
    ; (this is the original behavior of Asterisk 1.0 and earlier).
    ;
    ;autofallthrough=no
    ;
    ;
    ;
    ; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
    ; a Trie to find the best matching pattern is used. In dialplans
    ; with more than about 20-40 extensions in a single context, this
    ; new algorithm can provide a noticeable speedup.
    ; With 50 extensions, the speedup is 1.32x
    ; with 88 extensions, the speedup is 2.23x
    ; with 138 extensions, the speedup is 3.44x
    ; with 238 extensions, the speedup is 5.8x
    ; with 438 extensions, the speedup is 10.4x
    ; With 1000 extensions, the speedup is ~25x
    ; with 10,000 extensions, the speedup is 374x
    ; Basically, the new algorithm provides a flat response
    ; time, no matter the number of extensions.
    ;
    ; By default, the old pattern matcher is used.
    ;
    ; ****This is a new feature! *********************
    ; The new pattern matcher is for the brave, the bold, and
    ; the desperate. If you have large dialplans (more than about 50 extensions
    ; in a context), and/or high call volume, you might consider setting
    ; this value to "yes" !!
    ; Please, if you try this out, and are forced to return to the
    ; old pattern matcher, please report your reasons in a bug report
    ; on https://issues.asterisk.org. We have made good progress in providing
    ; something compatible with the old matcher; help us finish the job!
    ;
    ; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
    ; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
    ;
    ;extenpatternmatchnew=no
    ;
    ; If clearglobalvars is set, global variables will be cleared
    ; and reparsed on a dialplan reload, or Asterisk reload.
    ;
    ; If clearglobalvars is not set, then global variables will persist
    ; through reloads, and even if deleted from the extensions.conf or
    ; one of its included files, will remain set to the previous value.
    ;
    ; NOTE: A complication sets in, if you put your global variables into
    ; the AEL file, instead of the extensions.conf file. With clearglobalvars
    ; set, a "reload" will often leave the globals vars cleared, because it
    ; is not unusual to have extensions.conf (which will have no globals)
    ; load after the extensions.ael file (where the global vars are stored).
    ; So, with "reload" in this particular situation, first the AEL file will
    ; clear and then set all the global vars, then, later, when the extensions.conf
    ; file is loaded, the global vars are all cleared, and then not set, because
    ; they are not stored in the extensions.conf file.
    ;
    clearglobalvars=no
    ;
    ; User context is where entries from users.conf are registered.  The
    ; default value is 'default'
    ;
    ;userscontext=default
    ;
    ; You can include other config files, use the #include command
    ; (without the ';'). Note that this is different from the "include" command
    ; that includes contexts within other contexts. The #include command works
    ; in all asterisk configuration files.
    ;#include "filename.conf"
    ;#include <filename.conf>
    ;#include filename.conf
    ;
    ; You can execute a program or script that produces config files, and they
    ; will be inserted where you insert the #exec command. The #exec command
    ; works on all asterisk configuration files.  However, you will need to
    ; activate them within asterisk.conf with the "execincludes" option.  They
    ; are otherwise considered a security risk.
    ;#exec /opt/bin/build-extra-contexts.sh
    ;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
    ;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
    ;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
    ;

    ; The "Globals" category contains global variables that can be referenced
    ; in the dialplan with the GLOBAL dialplan function:
    ; ${GLOBAL(VARIABLE)}
    ; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
    ; Unix/Linux environmental variables can be reached with the ENV dialplan
    ; function: ${ENV(VARIABLE)}
    ;
    [globals]
    CONSOLE=Console/dsp				; Console interface for demo
    ;CONSOLE=DAHDI/1
    ;CONSOLE=Phone/phone0
    IAXINFO=guest					; IAXtel username/password
    ;IAXINFO=myuser:mypass
    TRUNK=DAHDI/G2					; Trunk interface
    ;
    ; Note the 'G2' in the TRUNK variable above. It specifies which group (defined
    ; in chan_dahdi.conf) to dial, i.e. group 2, and how to choose a channel to use
    ; in the specified group. The four possible options are:
    ;
    ; g: select the lowest-numbered non-busy DAHDI channel
    ;    (aka. ascending sequential hunt group).
    ; G: select the highest-numbered non-busy DAHDI channel
    ;    (aka. descending sequential hunt group).
    ; r: use a round-robin search, starting at the next highest channel than last
    ;    time (aka. ascending rotary hunt group).
    ; R: use a round-robin search, starting at the next lowest channel than last
    ;    time (aka. descending rotary hunt group).
    ;
    TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
    ;TRUNK=IAX2/user:pass@provider

    ;FREENUMDOMAIN=mydomain.com                     ; domain to send on outbound
                                                    ; freenum calls (uses outbound-freenum
                                                    ; context)

    ;
    ; WARNING WARNING WARNING WARNING
    ; If you load any other extension configuration engine, such as pbx_ael.so,
    ; your global variables may be overridden by that file.  Please take care to
    ; use only one location to set global variables, and you will likely save
    ; yourself a ton of grief.
    ; WARNING WARNING WARNING WARNING
    ;
    ; Any category other than "General" and "Globals" represent
    ; extension contexts, which are collections of extensions.
    ;
    ; Extension names may be numbers, letters, or combinations
    ; thereof. If an extension name is prefixed by a '_'
    ; character, it is interpreted as a pattern rather than a
    ; literal.  In patterns, some characters have special meanings:
    ;
    ;   X - any digit from 0-9
    ;   Z - any digit from 1-9
    ;   N - any digit from 2-9
    ;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
    ;   . - wildcard, matches anything remaining (e.g. _9011. matches
    ;	anything starting with 9011 excluding 9011 itself)
    ;   ! - wildcard, causes the matching process to complete as soon as
    ;       it can unambiguously determine that no other matches are possible
    ;
    ; For example, the extension _NXXXXXX would match normal 7 digit dialings,
    ; while _1NXXNXXXXXX would represent an area code plus phone number
    ; preceded by a one.
    ;
    ; Each step of an extension is ordered by priority, which must always start
    ; with 1 to be considered a valid extension.  The priority "next" or "n" means
    ; the previous priority plus one, regardless of whether the previous priority
    ; was associated with the current extension or not.  The priority "same" or "s"
    ; means the same as the previously specified priority, again regardless of
    ; whether the previous entry was for the same extension.  Priorities may be
    ; immediately followed by a plus sign and another integer to add that amount
    ; (most useful with 's' or 'n').  Priorities may then also have an alias, or
    ; label, in parentheses after their name which can be used in goto situations.
    ;
    ; Contexts contain several lines, one for each step of each extension.  One may
    ; include another context in the current one as well, optionally with a date
    ; and time.  Included contexts are included in the order they are listed.
    ; Switches may also be included within a context.  The order of matching within
    ; a context is always exact extensions, pattern match extensions, includes, and
    ; switches.  Includes are always processed depth-first.  So for example, if you
    ; would like a switch "A" to match before context "B", simply put switch "A" in
    ; an included context "C", where "C" is included in your original context
    ; before "B".
    ;
    ;[context]
    ;
    ;autohints = yes
    ; If enabled for a context, a device state hint will be automatically created in
    ; the context with the name of the device and updated with device state changes.
    ;
    ;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
    ;
    ; Timing list for includes is
    ;
    ;   <time range>,<days of week>,<days of month>,<months>[,<timezone>]
    ;
    ; Note that ranges may be specified to wrap around the ends.  Also, minutes are
    ; fine-grained only down to the closest even minute.
    ;
    ;include => daytime,9:00-17:00,mon-fri,*,*
    ;include => weekend,*,sat-sun,*,*
    ;include => weeknights,17:02-8:58,mon-fri,*,*
    ;
    ; ignorepat can be used to instruct drivers to not cancel dialtone upon receipt
    ; of a particular pattern.  The most commonly used example is of course '9'
    ; like this:
    ;
    ;ignorepat => 9
    ;
    ; so that dialtone remains even after dialing a 9.  Please note that ignorepat
    ; only works with channels which receive dialtone from the PBX, such as DAHDI,
    ; Phone, and VPB.  Other channels, such as IAX2, PJSIP, SIP and MGCP, which generate
    ; generate their own dialtone and converse with the PBX only after a number is
    ; complete, are generally unaffected by ignorepat (unless DISA or another method
    ; is used to generate a dialtone after answering the channel).
    ;

    ;
    ; Sample entries for extensions.conf
    ;
    ;
    [dundi-e164-canonical]
    ;include => stdexten
    ;
    ; List canonical entries here
    ;
    ;exten => 12564286000,1,Gosub(6000,stdexten(IAX2/foo))
    ;exten => 12564286000,n,Goto(default,s,1)	; exited Voicemail
    ;exten => _125642860XX,1,Dial(IAX2/otherbox/${EXTEN:7})
    ;exten => _125642861XX,1,Dial(IAX2/user@example.com/${EXTEN:7})
    ;exten => _125642862XX,1,Dial(IAX2/user:secret@example.com/${EXTEN:7})
    ;exten => _125642863XX,1,Dial(IAX2/user:secret:[outkey]@example.com/${EXTEN:7})

    [dundi-e164-customers]
    ;
    ; If you are an ITSP or Reseller, list your customers here.
    ;
    ;exten => _12564286000,1,Dial(PJSIP/customer1)
    ;exten => _12564286001,1,Dial(IAX2/customer2)

    [dundi-e164-via-pstn]
    ;
    ; If you are freely delivering calls to the PSTN, list them here
    ;
    ;exten => _1256428XXXX,1,Dial(DAHDI/G2/${EXTEN:7}) ; Expose all of 256-428
    ;exten => _1256325XXXX,1,Dial(DAHDI/G2/${EXTEN:7}) ; Ditto for 256-325

    [dundi-e164-local]
    ;
    ; Context to put your dundi IAX2 or SIP user in for
    ; full access
    ;
    include => dundi-e164-canonical
    include => dundi-e164-customers
    include => dundi-e164-via-pstn

    [dundi-e164-switch]
    ;
    ; Just a wrapper for the switch
    ;
    switch => DUNDi/e164

    [dundi-e164-lookup]
    ;
    ; Locally to lookup, try looking for a local E.164 solution
    ; then try DUNDi if we don't have one.
    ;
    include => dundi-e164-local
    include => dundi-e164-switch
    ;
    ; DUNDi can also be implemented as a subroutine instead of using
    ; the Local channel driver.
    ;
    [dundi-e164]
    ;
    ; ARG1 is the extension to Dial
    ;
    ; Extension "s" is not a wildcard extension that matches "anything".
    ; In macros, it is the start extension. In most other cases,
    ; you have to goto "s" to execute that extension.
    ;
    ; Note: In old versions of Asterisk the PBX in some cases defaulted to
    ; extension "s" when a given extension was wrong (like in AMI originate).
    ; This is no longer the case.
    ;
    ; For wildcard matches, see above - all pattern matches start with
    ; an underscore.
    exten => s,1,Goto(${ARG1},1)
    include => dundi-e164-lookup

    ;
    ; Here is how to make a call to another Asterisk server using the IAX2 protocol
    ;
    [iax2-trunk]
    exten => _555XXXX,1,Dial(IAX2/username:secret@example.com/${EXTEN}@some-dialplan-context)

    ;
    ; The SWITCH statement permits a server to share the dialplan with
    ; another server. Use with care: Reciprocal switch statements are not
    ; allowed (e.g. both A -> B and B -> A), and the switched server needs
    ; to be on-line or else dialing can be severely delayed.
    ;
    [iaxprovider]
    ;switch => IAX2/user:[key]@myserver/mycontext

    [trunkint]
    ;
    ; International long distance through trunk
    ;
    exten => _9011.,1,Gosub(dundi-e164,s,1(${EXTEN:4}))
    ;	same => n,Hangup()
    exten => _9011.,n,Dial(${GLOBAL(TRUNK)}/${FILTER(0-9,${EXTEN:${GLOBAL(TRUNKMSD)}})})

    [trunkld]
    ;
    ; Long distance context accessed through trunk
    ;
    exten => _91NXXNXXXXXX,1,Gosub(dundi-e164,s,1(${EXTEN:1}))
    exten => _91NXXNXXXXXX,n,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

    [trunklocal]
    ;
    ; Local seven-digit dialing accessed through trunk interface
    ;
    exten => _9NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

    [trunktollfree]
    ;
    ; Long distance context accessed through trunk interface
    ;
    exten => _91800NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
    exten => _91888NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
    exten => _91877NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
    exten => _91866NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

    [international]
    ;
    ; Master context for international long distance
    ;
    ignorepat => 9
    include => longdistance
    include => trunkint

    [longdistance]
    ;
    ; Master context for long distance
    ;
    ignorepat => 9
    include => local
    include => trunkld

    [local]
    ;
    ; Master context for local, toll-free, and iaxtel calls only
    ;
    ignorepat => 9
    include => default
    include => trunklocal
    include => iaxtel700
    include => trunktollfree
    include => iaxprovider

    ;Include parkedcalls (or the context you define in features conf)
    ;to enable call parking.
    include => parkedcalls
    ;
    ; You can use an alternative switch type as well, to resolve
    ; extensions that are not known here, for example with remote
    ; IAX switching you transparently get access to the remote
    ; Asterisk PBX
    ;
    ; switch => IAX2/user:password@bigserver/local
    ;
    ; An "lswitch" is like a switch but is literal, in that
    ; variable substitution is not performed at load time
    ; but is passed to the switch directly (presumably to
    ; be substituted in the switch routine itself)
    ;
    ; lswitch => Loopback/12${EXTEN}@othercontext
    ;
    ; An "eswitch" is like a switch but the evaluation of
    ; variable substitution is performed at runtime before
    ; being passed to the switch routine.
    ;
    ; eswitch => IAX2/context@${CURSERVER}

    ; The following two contexts are a template to enable the ability to dial
    ; ISN numbers. For more information about what an ISN number is, please see
    ; http://www.freenum.org.
    ;
    ; This is the dialing hook.  use:
    ; include => outbound-freenum

    [outbound-freenum]
    ; We'll add more digits as needed. The purpose is to dial things
    ; like extension numbers at domains (ITAD number) so we're matching
    ; on lengths of 1 through 6 prior to the separator (the asterisk [*])
    ;
    exten => _X*X!,1,Goto(outbound-freenum2,${EXTEN},1)
    exten => _XX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
    exten => _XXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
    exten => _XXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
    exten => _XXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
    exten => _XXXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)

    [outbound-freenum2]
    ; This is the handler which performs the dialing logic. It is called
    ; from the [outbound-freenum] context
    ;
    exten => _X!,1,Verbose(2,Performing ISN lookup for ${EXTEN})
      same => n,Set(SUFFIX=${CUT(EXTEN,*,2-)})                                ; make sure the suffix is all digits as well
      same => n,GotoIf($["${FILTER(0-9,${SUFFIX})}" != "${SUFFIX}"]?fn-CONGESTION,1)
                                                                            ; filter out bad characters per the README-SERIOUSLY.best-practices.txt document
      same => n,Set(TIMEOUT(absolute)=10800)
      same => n,Set(isnresult=${ENUMLOOKUP(${EXTEN},sip,,1,freenum.org)})     ; perform our lookup with freenum.org
      same => n,GotoIf($["${isnresult}" != ""]?from)
      same => n,Set(DIALSTATUS=CONGESTION)
      same => n,Goto(fn-CONGESTION,1)
      same => n(from),Set(__SIPFROMUSER=${CALLERID(num)})
      same => n,GotoIf($["${GLOBAL(FREENUMDOMAIN)}" = ""]?dial)               ; check if we set the FREENUMDOMAIN global variable in [global]
      same => n,Set(__SIPFROMDOMAIN=${GLOBAL(FREENUMDOMAIN)})                 ;    if we did set it, then we'll use it for our outbound dialing domain
      same => n(dial),Dial(SIP/${isnresult},40)
      same => n,Goto(fn-${DIALSTATUS},1)

    exten => fn-BUSY,1,Busy()

    exten => _f[n]-.,1,NoOp(ISN: ${DIALSTATUS})
    same => n,Congestion()

    [trunkdial]
    ;
    ; Standard trunk dial subroutine (hangs up on a dialstatus that should
    ; terminate call)
    ;   ${ARG1} - What to dial
    ;
    exten => s,1,StackPop()
      same => n,Dial(${ARG1})
    exten => s,n,Goto(s-${DIALSTATUS},1)
    exten => s-NOANSWER,1,Hangup()
    exten => s-BUSY,1,PlayTones(busy)
      same => n,Wait(60)
      same => n,Hangup()
    exten => s-CHANUNAVAIL,1,PlayTones(congestion)
      same => n,Wait(60)
      same => n,Hangup()
    exten => s-CONGESTION,1,PlayTones(congestion)
      same => n,Wait(60)
      same => n,Hangup()
    exten => _s-.,1,NoOp(${DIALSTATUS})
      same => n,Hangup()

    [stdexten]
    ;
    ; Standard extension subroutine:
    ;   ${EXTEN} - Extension
    ;   ${ARG1} - Device(s) to ring
    ;   ${ARG2} - Optional context in Voicemail
    ;
    ; Note that the current version will drop through to the next priority in the
    ; case of their pressing '#'.  This gives more flexibility in what do to next:
    ; you can prompt for a new extension, or drop the call, or send them to a
    ; general delivery mailbox, or...
    ;
    ; The use of the LOCAL() function is purely for convenience.  Any variable
    ; initially declared as LOCAL() will disappear when the innermost Gosub context
    ; in which it was declared returns.  Note also that you can declare a LOCAL()
    ; variable on top of an existing variable, and its value will revert to its
    ; previous value (before being declared as LOCAL()) upon Return.
    ;
    exten => _X.,50000(stdexten),NoOp(Start stdexten)
      same => n,Set(LOCAL(ext)=${EXTEN})
      same => n,Set(LOCAL(dev)=${ARG1})
      same => n,Set(LOCAL(cntx)=${ARG2})
      same => n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
      same => n,Dial(${dev},20)				; Ring the interface, 20 seconds maximum
      same => n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

    exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
      same => n,Return()			; If they press #, return to start

    exten => stdexten-BUSY,1,VoiceMail(${mbx},b)		; If busy, send to voicemail w/ busy announce
      same => n,Return()			; If they press #, return to start

    exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

    exten => a,1,VoiceMailMain(${mbx})			; If they press *, send the user into VoicemailMain
    exten => a,n,Return()

    [stdPrivacyexten]
    ;
    ; Standard extension subroutine:
    ;   ${ARG1} - Extension
    ;   ${ARG2} - Device(s) to ring
    ;   ${ARG3} - Optional DONTCALL context name to jump to (assumes the s,1 extension-priority)
    ;   ${ARG4} - Optional TORTURE context name to jump to (assumes the s,1 extension-priority)`
    ;   ${ARG5} - Context in voicemail (if empty, then "default")
    ;
    ; See above note in stdexten about priority handling on exit.
    ;
    exten => _X.,60000(stdPrivacyexten),NoOp(Start stdPrivacyexten)
      same => n,Set(LOCAL(ext)=${ARG1})
      same => n,Set(LOCAL(dev)=${ARG2})
      same => n,Set(LOCAL(dontcntx)=${ARG3})
      same => n,Set(LOCAL(tortcntx)=${ARG4})
      same => n,Set(LOCAL(cntx)=${ARG5})

    exten => _X.,n,Set(LOCAL(mbx)="${ext}"$["${cntx}" ? "@${cntx}" :: ""])
      same => n,Dial(${dev},20,p)			; Ring the interface, 20 seconds maximum, call screening
                ; option (or use P for databased call _X.screening)
      same => n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

    exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
      same => n,NoOp(Finish stdPrivacyexten NOANSWER)
      same => n,Return()			; If they press #, return to start

    exten => stdexten-BUSY,1,VoiceMail(${mbx},b)		; If busy, send to voicemail w/ busy announce
      same => n,NoOp(Finish stdPrivacyexten BUSY)
      same => n,Return()			; If they press #, return to start

    exten => stdexten-DONTCALL,1,Goto(${dontcntx},s,1)	; Callee chose to send this call to a polite "Don't call again" script.

    exten => stdexten-TORTURE,1,Goto(${tortcntx},s,1)	; Callee chose to send this call to a telemarketer torture script.

    exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

    exten => a,1,VoiceMailMain(${mbx})		; If they press *, send the user into VoicemailMain
      same => n,Return()

    [sub-page]
    ;
    ; Paging subroutine:
    ;
    ;       Check to see if SIP device is in use and DO NOT PAGE if they are
    ;
    ;   ${ARG1} - Device to page
    exten => s,1,ChanIsAvail(${ARG1},s)			; s is for ANY call
      same => n,GotoIf($["${AVAILSTATUS}" = "1"]?autoanswer:fail)
      same => n(autoanswer),Set(_ALERT_INFO="RA")			; This is for the PolyComs
      same => n,SIPAddHeader(Call-Info: Answer-After=0)	; This is for the Grandstream, Snoms, and Others
      same => n,NoOp()					; Add others here and Post on the Wiki!!!!
      same => n,Dial(${ARG1})
      same => n(fail),Hangup()

    [demo]
    include => stdexten
    ;
    ; We start with what to do when a call first comes in.
    ;
    exten => s,1,Wait(1)			; Wait a second, just for fun
      same => n,Answer()			; Answer the line
      same => n,Set(TIMEOUT(digit)=5)	; Set Digit Timeout to 5 seconds
      same => n,Set(TIMEOUT(response)=10)	; Set Response Timeout to 10 seconds
      same => n(restart),BackGround(demo-congrats)	; Play a congratulatory message
      same => n(instruct),BackGround(demo-instruct)	; Play some instructions
      same => n,WaitExten()		; Wait for an extension to be dialed.

    exten => 2,1,BackGround(demo-moreinfo)	; Give some more information.
    exten => 2,n,Goto(s,instruct)

    exten => 3,1,Set(CHANNEL(language)=fr)		; Set language to french
      same => n,Goto(s,restart)		; Start with the congratulations

    exten => 1000,1,Goto(default,s,1)
    ;
    ; We also create an example user, 1234, who is on the console and has
    ; voicemail, etc.
    ;
    exten => 1234,1,Playback(transfer,skip)		; "Please hold while..."
              ; (but skip if channel is not up)
      same => n,Gosub(${EXTEN},stdexten(${GLOBAL(CONSOLE)}))
      same => n,Goto(default,s,1)		; exited Voicemail

    exten => 1235,1,VoiceMail(1234,u)		; Right to voicemail

    exten => 1236,1,Dial(Console/dsp)		; Ring forever
      same => n,VoiceMail(1234,b)		; Unless busy

    ;
    ; # for when they're done with the demo
    ;
    exten => #,1,Playback(demo-thanks)	; "Thanks for trying the demo"
      same => n,Hangup()			; Hang them up.

    ;
    ; A timeout and "invalid extension rule"
    ;
    exten => t,1,Goto(#,1)			; If they take too long, give up
    exten => i,1,Playback(invalid)		; "That's not valid, try again"

    ;
    ; Create an extension, 600, for evaluating echo latency.
    ;
    exten => 600,1,Playback(demo-echotest)	; Let them know what's going on
      same => n,Echo()			; Do the echo test
      same => n,Playback(demo-echodone)	; Let them know it's over
      same => n,Goto(s,6)		; Start over

    ;
    ;	You can use the page subroutine to intercom a individual user
    exten => 76245,1,Gosub(page,s,1(SIP/Grandstream1))
    ; or if your peernames are the same as extensions
    exten => _7XXX,1,Gosub(page,s,1(SIP/${EXTEN}))
    ;
    ;
    ; System Wide Page at extension 7999
    ;
    exten => 7999,1,Set(TIMEOUT(absolute)=60)
      same => n,Page(Local/Grandstream1@page&Local/Xlite1@page&Local/1234@page/n,d)

    ; Give voicemail at extension 8500
    ;
    exten => 8500,1,VoiceMailMain()
      same => n,Goto(s,6)
    ;
    ; Here's what a phone entry would look like (IXJ for example)
    ;
    ;exten => 1265,1,Dial(Phone/phone0,15)
    ;	same => n,Goto(s,5)

    ;
    ;	The page context calls up the sub-page subroutine that sets variables needed for auto-answer
    ;	It is in is own context to make calling it from the Page() application as simple as
    ;	Local/{peername}@page
    ;
    [page]
    exten => _X.,1,Gosub(sub-page,s,1(SIP/${EXTEN}))
      same => n,Hangup()

    ;[mainmenu]
    ;
    ; Example "main menu" context with submenu
    ;
    ;exten => s,1,Answer
    ;	same => n,Background(thanks)		; "Thanks for calling press 1 for sales, 2 for support, ..."
    ;	same => n,WaitExten
    ;exten => 1,1,Goto(submenu,s,1)
    ;exten => 2,1,Hangup
    ;include => default
    ;
    ;[submenu]
    ;exten => s,1,Ringing					; Make them comfortable with 2 seconds of ringback
    ;	same => n,Wait,2
    ;	same => n,Background(submenuopts)	; "Thanks for calling the sales department.  Press 1 for steve, 2 for..."
    ;	same => n,WaitExten
    ;exten => 1,1,Goto(default,steve,1)
    ;exten => 2,1,Goto(default,mark,2)

    [public]
    ;
    ; ATTENTION: If your Asterisk is connected to the internet and you do
    ; not have allowguest=no in sip.conf, everybody out there may use your
    ; public context without authentication.  In that case you want to
    ; double check which services you offer to the world.
    ;
    include => demo

    [default]
    ;
    ; By default we include the demo.  In a production system, you
    ; probably don't want to have the demo there.
    ;
    include => demo

    ;
    ; An extension like the one below can be used for FWD, Nikotel, sipgate etc.
    ; Note that you must have a [sipprovider] section in sip.conf
    ;
    ;exten => _41X.,1,Dial(SIP/${FILTER(0-9,${EXTEN:2})}@sipprovider,,r)

    ; Real extensions would go here. Generally you want real extensions to be
    ; 4 or 5 digits long (although there is no such requirement) and start with a
    ; single digit that is fairly large (like 6 or 7) so that you have plenty of
    ; room to overlap extensions and menu options without conflict.  You can alias
    ; them with names, too, and use global variables

    ;exten => 6245,hint,SIP/Grandstream1&SIP/Xlite1(Joe Schmoe) ; Channel hints for presence
    ;exten => 6245,1,Dial(SIP/Grandstream1,20,rt)	; permit transfer
    ;exten => 6245,n(dial),Dial(${HINT},20,rtT)	; Use hint as listed
    ;exten => 6245,n,VoiceMail(6245,u)		; Voicemail (unavailable)
    ;exten => 6245,s+1,Hangup			; s+1, same as n
    ;exten => 6245,dial+101,VoiceMail(6245,b)	; Voicemail (busy)
    ;exten => 6361,1,Dial(IAX2/JaneDoe,,rm)		; ring without time limit
    ;exten => 6389,1,Dial(MGCP/aaln/1@192.168.0.14)
    ;exten => 6390,1,Dial(JINGLE/caller/callee) ; Dial via jingle using labels
    ;exten => 6391,1,Dial(JINGLE/asterisk@digium.com/mogorman@astjab.org) ;Dial via jingle using asterisk as the transport and calling mogorman.
    ;exten => 6394,1,Dial(Local/6275/n)		; this will dial ${MARK}

    ;exten => 6275,1,Gosub(${EXTEN},stdexten(${MARK}))
                ; assuming ${MARK} is something like DAHDI/2
    ;exten => 6275,n,Goto(default,s,1)		; exited Voicemail
    ;exten => mark,1,Goto(6275,1)			; alias mark to 6275
    ;exten => 6536,1,Gosub(${EXTEN},stdexten(${WIL}))
                ; Ditto for wil
    ;	same => n,Goto(default,s,1)		; exited Voicemail
    ;exten => wil,1,Goto(6236,1)

    ;If you want to subscribe to the status of a parking space, this is
    ;how you do it. Subscribe to extension 6600 in sip, and you will see
    ;the status of the first parking lot with this extensions' help
    ;exten => 6600,hint,park:701@parkedcalls
    ;exten => 6600,1,noop
    ;
    ;To subscribe to the availability of a free member in the 'markq' queue.
    ;Note: '_avail' is added to the QueueName
    ;exten => 8501,hint,Queue:markq_avail
    ;exten => 8501,1,Queue(markq)
    ;
    ; You can also monitor the status of a queue by providing a hint for a
    ; particular queue name.
    ;exten => 8502,hint,Queue:markq
    ;exten => 8502,1,Queue(markq)
    ;
    ; Some other handy things are an extension for checking voicemail via
    ; voicemailmain
    ;
    ;exten => 8500,1,VoicemailMain
    ;	same => n,Hangup
    ;
    ; Or a conference room (you'll need to edit meetme.conf to enable this room)
    ;
    ;exten => 8600,1,Meetme(1234)
    ;
    ; Or playing an announcement to the called party, as soon it answers
    ;
    ;exten = 8700,1,Dial(${MARK},30,A(/path/to/my/announcemsg))
    ;

    ; example of a compartmentalized company called "acme"
    ;
    ; this is the context that your incoming IAX/SIP trunk dumps you in...
    ;[acme-incoming]
    ;exten => s,1,Wait(1)
    ;	same => n,Answer() ; "same" allows you to continue an extension more
    ;			concisely without having to repeat the extension or pattern
    ;	same => n(menu),Playback(acme/vm-brief-menu)
    ;	same => n(exten),Background(vm-enter-num-to-call)
    ;	same => n,WaitExten(5)
    ;	same => n(goodbye),Playback(vm-goodbye)
    ;	same => n(end),Hangup()
    ;
    ;include  => acme-extens
    ;
    ;exten => i,1,Playback(vm-invalid)
    ;	same => n,Goto(s,exten)			; optionally, transfer to operator
    ;
    ;exten => t,1,Goto(s,goodbye)
    ;
    ; this is the context our internal SIP hardphones use (see sip.conf)
    ;
    ;[acme-internal]
    ;exten => s,1,Answer()
    ;	same => n(exten),Background(vm-enter-num-to-call)
    ;	same => n,WaitExten(5)
    ;	same => n(goodbye),Playback(vm-goodbye)
    ;	same => n(end),Hangup()
    ;
    ;include => trunkint
    ;include => trunkld
    ;include => trunklocal
    ;
    ;include => acme-extens
    ;
    ; you can test what your system sounds like to outside callers by dialing this
    ;exten => 777,1,DISA(no-password,acme-incoming)
    ;
    ; grouping of acme's extensions... never used directly, always included.
    ;
    ;[acme-extens]
    ;include => stdexten
    ;exten => 111,1,Gosub(111,stdexten(SIP/pete_1,acme))
    ;	same => n,Goto(s,exten)
    ;
    ;exten => 112,1,Gosub(112,stdexten(SIP/nancy_1,acme))
    ;	same => n,Goto(s,end)
    ;
    ; end of acme example

    ;
    ; Time context: you can patch this in via the following.
    ;
    ; [acme-internal]
    ; ...
    ; exten => 777,1,Gosub(time)
    ; exten => 777,n,Hangup()
    ;
    ; ...
    ; include => time
    ;
    ; Note: if you're geographically spread out, you can have SIP extensions
    ; specify their own local timezone in sip.conf as:
    ;
    ; [boi]
    ; type=friend
    ; context=acme-internal
    ; callerid="Boise Ofc. <2083451111>"
    ; ...
    ; ; use system-wide default timezone of MST7MDT
    ;
    ; [lws]
    ; type=friend
    ; context=acme-internal
    ; callerid="Lewiston Ofc. <2087431111>"
    ; ...
    ; setvar=timezone=PST8PDT
    ;
    ; "timezone" isn't a 'reserved' name in any way, and other places where
    ; the timezone is significant (e.g. calls to "SayUnixTime()", etc) will
    ; require modification as well.  Note that voicemail.conf already has
    ; a mechanism for timezones.
    ;

    [time]
    exten => _X.,30000(time),NoOp(Time: ${EXTEN} ${timezone})
      same => n,Wait(0.25)
      same => n,Answer()
    ; the amount of delay is set for English; you may need to adjust this time
    ; for other languages if there's no pause before the synchronizing beep.
      same => n,Set(FUTURETIME=$[${EPOCH} + 12])
      same => n,SayUnixTime(${FUTURETIME},Zulu,HNS)
      same => n,SayPhonetic(z)
    ; use the timezone associated with the extension (sip only), or system-wide
    ; default if one hasn't been set.
      same => n,SayUnixTime(${FUTURETIME},${timezone},HNS)
      same => n,Playback(spy-local)
      same => n,WaitUntil(${FUTURETIME})
      same => n,Playback(beep)
      same => n,Return()

    ;
    ; ANI context: use in the same way as "time" above
    ;

    [ani]
    exten => _X.,40000(ani),NoOp(ANI: ${EXTEN})
      same => n,Wait(0.25)
      same => n,Answer()
      same => n,Playback(vm-from)
      same => n,SayDigits(${CALLERID(ani)})
      same => n,Wait(1.25)
      same => n,SayDigits(${CALLERID(ani)})	; playback again in case of missed digit
      same => n,Return()

    ; For more information on applications, just type "core show applications" at your
    ; friendly Asterisk CLI prompt.
    ;
    ; "core show application <command>" will show details of how you
    ; use that particular application in this file, the dial plan.
    ; "core show functions" will list all dialplan functions
    ; "core show function <COMMAND>" will show you more information about
    ; one function. Remember that function names are UPPER CASE.

    [from-external]
    exten => 18077893501,1,Playback(demo-echodone)
      same => n,Wait(1.25)
      same => n,Dial(PJSIP/5859@freeswitch)
      same => n,Playback(demo-echodone)	; Let them know it's over
      same => n,Goto(s,6)


  res_stun_monitor.conf: |
    ;
    ; Configuration file for the res_stun_monitor module
    ;
    ; The res_stun_monitor module sends STUN requests to a configured STUN server
    ; periodically.  If the monitor detects a change in the external IP address or port
    ; provided by the STUN server an event is sent out internally within Asterisk
    ; to alert all listeners to that event of the change.

    ; The current default listeners for the network change event include chan_sip
    ; and chan_iax.  Both of these channel drivers by default react to this event
    ; by renewing all outbound registrations.  This allows the endpoints Asterisk
    ; is registering with to become aware of the address change and know the new
    ; location.
    ;
    [general]
    ;
    ; ---- STUN Server configuration ---
    ;  Setting the 'stunaddr' option to a valid address enables the STUN monitor.
    ;
    ;stunaddr = nat.ipaddr.network:3478    ; Address of the STUN server to query.
                                    ; Valid form:
                                    ;   [(hostname | IP-address) [':' port]]
                                    ; The port defaults to the standard STUN port (3478).
                                    ; Set to an empty value to disable STUN monitoring.
                                    ;   Default is disabled.
    ;stunrefresh = 30               ; Number of seconds between STUN refreshes.
                                    ;   Default is 30.
