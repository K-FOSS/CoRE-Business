apiVersion: v1
kind: ConfigMap
metadata:
  name: business-avoip-ejabberd-cfg-tpl

data:
  eJabberD.yaml: |
    hosts:
      - broker.mylogin.space

    #
    # AAA
    #

    #
    # Database
    #

    sql_type: pgsql
    sql_server: ${Database.Hostname}
    sql_port: ${Database.Port}
    sql_database: ${Database.Database}
    sql_username: ${Database.Username}
    sql_password: ${Database.Password}
    new_sql_schema: true

    #
    # Authentication
    #

    #
    # LDAP
    #

    ldap_servers:
      - ldap.mylogin.space

    ldap_port: 636

    #
    # LDAP Bind
    #
    {{`
    ldap_rootdn: 'cn={{ Username }},ou=users,dc=ldap,dc=mylogin,dc=space'
    ldap_password: '{{ Password }}'

    #
    # LDAP Searching
    #
    ldap_base: 'ou=users,dc=ldap,dc=mylogin,dc=space'
    ldap_filter: '(memberOf=cn=MQTT Users,ou=groups,dc=ldap,dc=mylogin,dc=space)'
    ldap_uids: [cn]
    `}}

    auth_method:
      - sql
      - ldap

    #
    # Authorization
    #

    acl:
      local:
        user_regexp: ''
      loopback:
        ip:
          - 127.0.0.0/8
          - ::1/128
          - ::FFFF:127.0.0.1/128
      admin:
        user:
          - admin@mq.broker.mylogin.space

    access_rules:
      local:
        allow: local
      c2s:
        deny: blocked
        allow: all
      announce:
        allow: admin
      configure:
        allow: admin
      muc_create:
        allow: local
      pubsub_createnode:
        allow: local
      trusted_network:
        allow: loopback

    api_permissions:
      'console commands':
        from:
          - ejabberd_ctl
        who: all
        what: '*'
      'admin access':
        who:
          access:
            allow:
              #acl: loopback
              acl: admin
          oauth:
            scope: 'ejabberd:admin'
            access:
              allow:
                #acl: loopback
                acl: admin
        what:
          - '*'
          - '!stop'
          - '!start'
      'public commands':
        who:
          ip: 127.0.0.1/8
        what:
          - status
          - connected_users_number

    #
    # Auditing
    #

    listen:
      - port: 5222
        ip: '::'
        module: ejabberd_c2s

      - port: 5269
        ip: '::'
        module: ejabberd_s2s_in
        transport: tcp

      - port: 5443
        ip: '::'
        module: ejabberd_http
        tls: true
        request_handlers:
          '/admin': ejabberd_web_admin
          '/api': mod_http_api
          '/bosh': mod_bosh
          '/captcha': ejabberd_captcha
          '/upload': mod_http_upload
          '/ws': ejabberd_http_ws
          '/oauth': ejabberd_oauth

      - port: 1883
        ip: '::'
        module: mod_mqtt
        backlog: 1000
        tls: true

    certfiles:
      - /etc/tls/mail/tls.crt
      - /etc/tls/mail/tls.crt

    language: 'en'

    sm_db_type: redis
    redis_pool_size: 5
    redis_server: 10.1.1.68
    redis_port: 6379

    modules:
      mod_adhoc: {}
      mod_admin_extra: {}
      mod_announce:
        access: announce
      mod_avatar: {}
      mod_blocking: {}
      mod_bosh: {}
      mod_caps: {}
      mod_carboncopy: {}
      mod_client_state: {}
      mod_configure: {}
      mod_disco: {}
      mod_fail2ban: {}
      mod_http_api: {}
      mod_http_upload:
        put_url: https://@HOST@:5443/upload
      mod_last: {}
      mod_mam:
        ## Mnesia is limited to 2GB, better to use an SQL backend
        ## For small servers SQLite is a good fit and is very easy
        ## to configure. Uncomment this when you have SQL configured:
        ## db_type: sql
        assume_mam_usage: true
        default: never
      mod_mqtt: {}
      mod_muc:
        access:
          - allow
        access_admin:
          - allow: admin
        access_create: muc_create
        access_persistent: muc_create
        access_mam:
          - allow
        default_room_options:
          allow_subscription: true # enable MucSub
          mam: false
      mod_muc_admin: {}
      mod_offline:
        access_max_user_messages: max_user_offline_messages
      mod_ping: {}
      mod_privacy: {}
      mod_private: {}
      mod_proxy65:
        access: local
        max_connections: 5
      mod_pubsub:
        access_createnode: pubsub_createnode
        plugins:
          - flat
          - pep
        force_node_config:
          ## Avoid buggy clients to make their bookmarks public
          storage:bookmarks:
            access_model: whitelist
      mod_push: {}
      mod_push_keepalive: {}
      mod_register:
        ## Only accept registration requests from the "trusted"
        ## network (see access_rules section above).
        ## Think twice before enabling registration from any
        ## address. See the Jabber SPAM Manifesto for details:
        ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
        ip_access: all
      mod_roster:
        versioning: true
      mod_sip: {}
      mod_s2s_dialback:
        access:
          allow:
            server: ejabberd.service.kjdev
          deny: all
      mod_shared_roster: {}
      mod_stream_mgmt:
        resend_on_timeout: if_offline
      mod_vcard: {}
      mod_vcard_xupdate: {}
      mod_version:
        show_os: false
