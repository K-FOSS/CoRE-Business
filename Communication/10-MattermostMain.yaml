apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-backplane-business-communications-mattermost-myloginspace
  namespace: argocd
spec:
  generators:
    - list:
        elements:
          - cluster: k0s-cntrl
            url: https://k0s-dc1-kubernetes-default.service.dc1.kjdev:6443
            ingress: teams.mylogin.space
            environment: 'prod'
  template:
    metadata:
      name: '{{cluster}}-business-communications-mattermost-helm'
    spec:
      project: core
      # syncPolicy:
      #   automated: {}
      #     selfHeal: true
      #     prune: true
      source:
        repoURL: https://helm.mattermost.com
        chart: mattermost-team-edition
        path: mattermost-team-edition
        targetRevision: 6.6.1
        helm:
          releaseName: mattermost-{{ environment }}
          values: |
            # Default values for mattermost-team-edition.
            # This is a YAML-formatted file.
            # Declare variables to be passed into your templates.
            image:
              repository: mattermost/mattermost-team-edition
              imagePullPolicy: IfNotPresent

            initContainerImage:
              repository: appropriate/curl
              tag: latest
              imagePullPolicy: IfNotPresent

            ## Deployment Strategy
            ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
            deploymentStrategy:
              type: RollingUpdate
              rollingUpdate: null

            ## How many old ReplicaSets for Mattermost Deployment you want to retain
            revisionHistoryLimit: 1

            ## Enable persistence using Persistent Volume Claims
            ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
            ## ref: https://docs.gitlab.com/ee/install/requirements.html#storage
            ##
            persistence:
              ## This volume persists generated data from users, like images, attachments...
              ##
              data:
                enabled: false
                size: 10Gi
                ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
                ## Default: volume.alpha.kubernetes.io/storage-class: default
                ##
                # storageClass:
                accessMode: ReadWriteOnce
              # existingClaim: ""
              plugins:
                enabled: false
                size: 1Gi
                ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
                ## Default: volume.alpha.kubernetes.io/storage-class: default
                ##
                # storageClass:
                accessMode: ReadWriteOnce
              # existingClaim: ""

            service:
              type: ClusterIP
              externalPort: 8080
              internalPort: 8080
              annotations: {}
              # loadBalancerIP:
              loadBalancerSourceRanges: []

            ingress:
              enabled: false
              path: /
              annotations:
                cert-manager.io/cluster-issuer: kjdev-cluster
                external-dns.alpha.kubernetes.io/target: k0s-dc1.resolvemy.host.
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
                traefik.ingress.kubernetes.io/router.tls: 'true'
              hosts:
                - teams.mylogin.space
              tls:
                - secretName: myloginspace-default-certificates
                  hosts:
                    - '*.mylogin.space'

            route:
              enabled: false

            ## If use this please disable the mysql chart by setting mysql.enable to false
            externalDB:
              enabled: true

              ## postgres or mysql
              externalDriverType: postgres
              externalConnectionString: <secret:CORE0_SITE1/data/Mattermost~DatabaseURI>

            mysql:
              enabled: false
              mysqlRootPassword: ""
              mysqlUser: ""
              mysqlPassword: ""
              mysqlDatabase: mattermost

              repository: mysql
              imageTag: '8.0.18'
              testFramework:
                enabled: false

              persistence:
                enabled: false
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                accessMode: ReadWriteOnce
                size: 10Gi
              # existingClaim: ""

            ## Additional pod annotations
            extraPodAnnotations: {}

            ## Additional env vars
            extraEnvVars:
              # This is an example of extra env vars when using with the deployment with GitLab Helm Charts
              # - name: POSTGRES_PASSWORD_GITLAB
              #   valueFrom:
              #     secretKeyRef:
              #       # NOTE: Needs to be manually created
              #       # kubectl create secret generic gitlab-postgresql-password --namespace <NAMESPACE> --from-literal postgres-password=<PASSWORD>
              #       name: gitlab-postgresql-password
              #       key: postgres-password
              # - name: POSTGRES_USER_GITLAB
              #   value: gitlab
              # - name: POSTGRES_HOST_GITLAB
              #   value: gitlab-postgresql
              # - name: POSTGRES_PORT_GITLAB
              #   value: "5432"
              # - name: POSTGRES_DB_NAME_MATTERMOST
              #   value: mm5
              - name: MM_SQLSETTINGS_DRIVERNAME
                value: "postgres"
              - name: MM_SQLSETTINGS_DATASOURCE
                valueFrom:
                  secretKeyRef:
                    name: mattermost-synced
                    key: DatabaseURI

            ## Additional init containers
            extraInitContainers: []
              # This is an example of extra Init Container when using with the deployment with GitLab Helm Charts
              # - name: bootstrap-database
              #   image: "postgres:9.6-alpine"
              #   imagePullPolicy: IfNotPresent
              #   env:
              #     - name: POSTGRES_PASSWORD_GITLAB
              #       valueFrom:
              #         secretKeyRef:
              #           name: gitlab-postgresql-password
              #           key: postgres-password
              #     - name: POSTGRES_USER_GITLAB
              #       value: gitlab
              #     - name: POSTGRES_HOST_GITLAB
              #       value: gitlab-postgresql
              #     - name: POSTGRES_PORT_GITLAB
              #       value: "5432"
              #     - name: POSTGRES_DB_NAME_MATTERMOST
              #       value: mm5
              #   command:
              #     - sh
              #     - "-c"
              #     - |
              #       if PGPASSWORD=$POSTGRES_PASSWORD_GITLAB psql -h $POSTGRES_HOST_GITLAB -p $POSTGRES_PORT_GITLAB -U $POSTGRES_USER_GITLAB -lqt | cut -d \| -f 1 | grep -qw $POSTGRES_DB_NAME_MATTERMOST; then
              #       echo "database already exist, exiting initContainer"
              #       exit 0
              #       else
              #       echo "Database does not exist. creating...."
              #       PGPASSWORD=$POSTGRES_PASSWORD_GITLAB createdb -h $POSTGRES_HOST_GITLAB -p $POSTGRES_PORT_GITLAB -U $POSTGRES_USER_GITLAB $POSTGRES_DB_NAME_MATTERMOST
              #       echo "Done"
              #       fi

            # Add additional volumes and mounts, for example to add SAML keys in the app or other files the app server may need to access
            extraVolumes: []
              # - hostPath:
              #     path: /var/log
              #   name: varlog
            extraVolumeMounts: []
              # - name: varlog
              #   mountPath: /host/var/log
              #   readOnly: true

            ## Node selector
            ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
            nodeSelector: {}

            ## Affinity
            ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
            affinity: {}

            ## Tolerations for pod assignment
            ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
            tolerations: []

            ## Configuration
            ## The config here will be injected as environment variables in the deployment
            ## Please refer to https://docs.mattermost.com/administration/config-settings.html#configuration-in-database for more information
            ## You can add any config here, but need to respect the format: MM_<GROUPSECTION>_<SETTING>. ie: MM_SERVICESETTINGS_ENABLECOMMANDS: false
            config:
              MM_PLUGINSETTINGS_CLIENTDIRECTORY: "./client/plugins"

      destination:
        server: '{{url}}'
        namespace: core-prod
